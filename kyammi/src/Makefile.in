# Makefile.in generated by automake 1.9.5 from Makefile.am.
# KDE tags expanded automatically by am_edit - $Revision: 1.50 $ 
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@



SOURCES = $(yammi_SOURCES)

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
bin_PROGRAMS = yammi$(EXEEXT)
subdir = src
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(appsdir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_yammi_OBJECTS = main.$(OBJEXT) artsplayer.$(OBJEXT) \
	CFrameHeader.$(OBJEXT) ConsistencyCheckDialog.$(OBJEXT) \
	CVBitRate.$(OBJEXT) foldercategories.$(OBJEXT) \
	folder.$(OBJEXT) foldergroups.$(OBJEXT) foldermedia.$(OBJEXT) \
	foldersorted.$(OBJEXT) fuzzsrch.$(OBJEXT) \
	lineeditshift.$(OBJEXT) mediaplayer.$(OBJEXT) \
	mp3_layer.$(OBJEXT) mydatetime.$(OBJEXT) mylist.$(OBJEXT) \
	mylistview.$(OBJEXT) noatunplayer.$(OBJEXT) \
	preferencesdialog.$(OBJEXT) prefs.$(OBJEXT) song.$(OBJEXT) \
	songentry.$(OBJEXT) songentryint2.$(OBJEXT) \
	songentryint.$(OBJEXT) songentrystring.$(OBJEXT) \
	songentrytimestamp.$(OBJEXT) songinfo.$(OBJEXT) \
	songlistitem.$(OBJEXT) updatedatabasedialog.$(OBJEXT) \
	updatedatabasemediadialog.$(OBJEXT) xmmsplayer.$(OBJEXT) \
	yammigui.$(OBJEXT) yammimodel.$(OBJEXT) \
	ConsistencyCheckParameter.$(OBJEXT) applytoalldialog.$(OBJEXT) \
	trackpositionslider.$(OBJEXT) util.$(OBJEXT) \
	searchthread.$(OBJEXT) gstplayer.$(OBJEXT)
#>- yammi_OBJECTS = $(am_yammi_OBJECTS)
#>+ 22
yammi_final_OBJECTS = yammiui.o Makefile.o Makefile.o yammi.all_cpp.o 
yammi_nofinal_OBJECTS = main.$(OBJEXT) artsplayer.$(OBJEXT) \
	CFrameHeader.$(OBJEXT) ConsistencyCheckDialog.$(OBJEXT) \
	CVBitRate.$(OBJEXT) foldercategories.$(OBJEXT) \
	folder.$(OBJEXT) foldergroups.$(OBJEXT) foldermedia.$(OBJEXT) \
	foldersorted.$(OBJEXT) fuzzsrch.$(OBJEXT) \
	lineeditshift.$(OBJEXT) mediaplayer.$(OBJEXT) \
	mp3_layer.$(OBJEXT) mydatetime.$(OBJEXT) mylist.$(OBJEXT) \
	mylistview.$(OBJEXT) noatunplayer.$(OBJEXT) \
	preferencesdialog.$(OBJEXT) prefs.$(OBJEXT) song.$(OBJEXT) \
	songentry.$(OBJEXT) songentryint2.$(OBJEXT) \
	songentryint.$(OBJEXT) songentrystring.$(OBJEXT) \
	songentrytimestamp.$(OBJEXT) songinfo.$(OBJEXT) \
	songlistitem.$(OBJEXT) updatedatabasedialog.$(OBJEXT) \
	updatedatabasemediadialog.$(OBJEXT) xmmsplayer.$(OBJEXT) \
	yammigui.$(OBJEXT) yammimodel.$(OBJEXT) \
	ConsistencyCheckParameter.$(OBJEXT) applytoalldialog.$(OBJEXT) \
	trackpositionslider.$(OBJEXT) util.$(OBJEXT) \
	searchthread.$(OBJEXT) gstplayer.$(OBJEXT) yammidcopiface_skel.$(OBJEXT) ApplyToAllBase.$(OBJEXT) ConsistencyCheckDialogBase.$(OBJEXT) DeleteDialog.$(OBJEXT) PreferencesDialogBase.$(OBJEXT) SongInfoDialog.$(OBJEXT) UpdateDatabaseDialogBase.$(OBJEXT) UpdateDatabaseMediaDialogBase.$(OBJEXT)\
mediaplayer.moc.o foldergroups.moc.o gstplayer.moc.o yammigui.moc.o lineeditshift.moc.o trackpositionslider.moc.o artsplayer.moc.o songinfo.moc.o folder.moc.o foldercategories.moc.o updatedatabasedialog.moc.o dummyplayer.moc.o mylistview.moc.o updatedatabasemediadialog.moc.o applytoalldialog.moc.o yammimodel.moc.o preferencesdialog.moc.o xmmsplayer.moc.o foldermedia.moc.o noatunplayer.moc.o ConsistencyCheckDialog.moc.o 
@KDE_USE_FINAL_FALSE@yammi_OBJECTS = $(yammi_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@yammi_OBJECTS = $(yammi_final_OBJECTS)
am__DEPENDENCIES_1 =
yammi_DEPENDENCIES = $(am__DEPENDENCIES_1)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/admin/depcomp
am__depfiles_maybe = depfiles
#>- CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 2
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \
#>- 	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
#>- 	$(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 3
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \
#>- 	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
#>+ 2
CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(KDE_CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(yammi_SOURCES)
DIST_SOURCES = $(yammi_SOURCES)
#>- RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
#>- 	html-recursive info-recursive install-data-recursive \
#>- 	install-exec-recursive install-info-recursive \
#>- 	install-recursive installcheck-recursive installdirs-recursive \
#>- 	pdf-recursive ps-recursive uninstall-info-recursive \
#>- 	uninstall-recursive
#>+ 6
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-exec-recursive install-info-recursive \
	install-recursive installcheck-recursive installdirs-recursive \
	pdf-recursive ps-recursive uninstall-info-recursive \
	uninstall-recursive nmcheck-recursive bcheck-recursive
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
appsDATA_INSTALL = $(INSTALL_DATA)
DATA = $(apps_DATA)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DIST_SUBDIRS = $(SUBDIRS)
#>- DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
#>+ 1
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)
ACLOCAL = @ACLOCAL@
AMDEP_FALSE = @AMDEP_FALSE@
AMDEP_TRUE = @AMDEP_TRUE@
AMTAR = @AMTAR@
AR = @AR@
ARTSCCONFIG = @ARTSCCONFIG@
AUTOCONF = @AUTOCONF@
AUTODIRS = @AUTODIRS@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CONF_FILES = @CONF_FILES@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXCPP = @CXXCPP@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DCOPIDL = @DCOPIDL@
DCOPIDL2CPP = @DCOPIDL2CPP@
DCOPIDLNG = @DCOPIDLNG@
DCOP_DEPENDENCIES = @DCOP_DEPENDENCIES@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
ECHO = @ECHO@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLE_PERMISSIVE_FLAG = @ENABLE_PERMISSIVE_FLAG@
EXEEXT = @EXEEXT@
F77 = @F77@
FFLAGS = @FFLAGS@
FRAMEWORK_COREAUDIO = @FRAMEWORK_COREAUDIO@
GMSGFMT = @GMSGFMT@
HAVE_GCC_VISIBILITY = @HAVE_GCC_VISIBILITY@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
KCFG_DEPENDENCIES = @KCFG_DEPENDENCIES@
KCONFIG_COMPILER = @KCONFIG_COMPILER@
KDECONFIG = @KDECONFIG@
KDE_EXTRA_RPATH = @KDE_EXTRA_RPATH@
KDE_INCLUDES = @KDE_INCLUDES@
KDE_LDFLAGS = @KDE_LDFLAGS@
KDE_MT_LDFLAGS = @KDE_MT_LDFLAGS@
KDE_MT_LIBS = @KDE_MT_LIBS@
KDE_NO_UNDEFINED = @KDE_NO_UNDEFINED@
KDE_PLUGIN = @KDE_PLUGIN@
KDE_RPATH = @KDE_RPATH@
KDE_USE_CLOSURE_FALSE = @KDE_USE_CLOSURE_FALSE@
KDE_USE_CLOSURE_TRUE = @KDE_USE_CLOSURE_TRUE@
KDE_USE_FINAL_FALSE = @KDE_USE_FINAL_FALSE@
KDE_USE_FINAL_TRUE = @KDE_USE_FINAL_TRUE@
KDE_USE_NMCHECK_FALSE = @KDE_USE_NMCHECK_FALSE@
KDE_USE_NMCHECK_TRUE = @KDE_USE_NMCHECK_TRUE@
KDE_XSL_STYLESHEET = @KDE_XSL_STYLESHEET@
LDFLAGS = @LDFLAGS@
LDFLAGS_AS_NEEDED = @LDFLAGS_AS_NEEDED@
LDFLAGS_NEW_DTAGS = @LDFLAGS_NEW_DTAGS@
LIBCOMPAT = @LIBCOMPAT@
LIBCRYPT = @LIBCRYPT@
LIBDL = @LIBDL@
LIBJPEG = @LIBJPEG@
LIBOBJS = @LIBOBJS@
LIBPNG = @LIBPNG@
LIBPTHREAD = @LIBPTHREAD@
LIBRESOLV = @LIBRESOLV@
LIBS = @LIBS@
LIBSM = @LIBSM@
LIBSOCKET = @LIBSOCKET@
LIBTOOL = @LIBTOOL@
LIBUCB = @LIBUCB@
LIBUTIL = @LIBUTIL@
LIBZ = @LIBZ@
LIB_KAB = @LIB_KAB@
LIB_KABC = @LIB_KABC@
LIB_KDECORE = @LIB_KDECORE@
LIB_KDEPIM = @LIB_KDEPIM@
LIB_KDEPRINT = @LIB_KDEPRINT@
LIB_KDEUI = @LIB_KDEUI@
LIB_KDNSSD = @LIB_KDNSSD@
LIB_KFILE = @LIB_KFILE@
LIB_KFM = @LIB_KFM@
LIB_KHTML = @LIB_KHTML@
LIB_KIMPROXY = @LIB_KIMPROXY@
LIB_KIO = @LIB_KIO@
LIB_KJS = @LIB_KJS@
LIB_KNEWSTUFF = @LIB_KNEWSTUFF@
LIB_KPARTS = @LIB_KPARTS@
LIB_KSPELL = @LIB_KSPELL@
LIB_KSYCOCA = @LIB_KSYCOCA@
LIB_KUTILS = @LIB_KUTILS@
LIB_POLL = @LIB_POLL@
LIB_QPE = @LIB_QPE@
LIB_QT = @LIB_QT@
LIB_SMB = @LIB_SMB@
LIB_X11 = @LIB_X11@
LIB_XEXT = @LIB_XEXT@
LIB_XRENDER = @LIB_XRENDER@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MAKEKDEWIDGETS = @MAKEKDEWIDGETS@
MCOPIDL = @MCOPIDL@
MEINPROC = @MEINPROC@
MOC = @MOC@
MSGFMT = @MSGFMT@
NOOPT_CFLAGS = @NOOPT_CFLAGS@
NOOPT_CXXFLAGS = @NOOPT_CXXFLAGS@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
QTE_NORTTI = @QTE_NORTTI@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
RANLIB = @RANLIB@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
TAGLIB_CONFIG = @TAGLIB_CONFIG@
TOPSUBDIRS = @TOPSUBDIRS@
UIC = @UIC@
UIC_TR = @UIC_TR@
USER_INCLUDES = @USER_INCLUDES@
USER_LDFLAGS = @USER_LDFLAGS@
USE_EXCEPTIONS = @USE_EXCEPTIONS@
USE_RTTI = @USE_RTTI@
USE_THREADS = @USE_THREADS@
VERSION = @VERSION@
WOVERLOADED_VIRTUAL = @WOVERLOADED_VIRTUAL@
XGETTEXT = @XGETTEXT@
XMLLINT = @XMLLINT@
XMMS_CFLAGS = @XMMS_CFLAGS@
XMMS_CONFIG = @XMMS_CONFIG@
XMMS_DATA_DIR = @XMMS_DATA_DIR@
XMMS_EFFECT_PLUGIN_DIR = @XMMS_EFFECT_PLUGIN_DIR@
XMMS_GENERAL_PLUGIN_DIR = @XMMS_GENERAL_PLUGIN_DIR@
XMMS_INPUT_PLUGIN_DIR = @XMMS_INPUT_PLUGIN_DIR@
XMMS_LIBS = @XMMS_LIBS@
XMMS_OUTPUT_PLUGIN_DIR = @XMMS_OUTPUT_PLUGIN_DIR@
XMMS_PLUGIN_DIR = @XMMS_PLUGIN_DIR@
XMMS_VERSION = @XMMS_VERSION@
XMMS_VISUALIZATION_PLUGIN_DIR = @XMMS_VISUALIZATION_PLUGIN_DIR@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_INCLUDES = @X_INCLUDES@
X_LDFLAGS = @X_LDFLAGS@
X_PRE_LIBS = @X_PRE_LIBS@
X_RPATH = @X_RPATH@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_F77 = @ac_ct_F77@
ac_ct_RANLIB = @ac_ct_RANLIB@
ac_ct_STRIP = @ac_ct_STRIP@
all_includes = @all_includes@
all_libraries = @all_libraries@
am__fastdepCC_FALSE = @am__fastdepCC_FALSE@
am__fastdepCC_TRUE = @am__fastdepCC_TRUE@
am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@
am__fastdepCXX_TRUE = @am__fastdepCXX_TRUE@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
datadir = @datadir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
include_ARTS_FALSE = @include_ARTS_FALSE@
include_ARTS_TRUE = @include_ARTS_TRUE@
include_x11_FALSE = @include_x11_FALSE@
include_x11_TRUE = @include_x11_TRUE@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
kde_appsdir = @kde_appsdir@
kde_bindir = @kde_bindir@
kde_confdir = @kde_confdir@
kde_datadir = @kde_datadir@
kde_htmldir = @kde_htmldir@
kde_icondir = @kde_icondir@
kde_includes = @kde_includes@
kde_kcfgdir = @kde_kcfgdir@
kde_libraries = @kde_libraries@
kde_libs_htmldir = @kde_libs_htmldir@
kde_libs_prefix = @kde_libs_prefix@
kde_locale = @kde_locale@
kde_mimedir = @kde_mimedir@
kde_moduledir = @kde_moduledir@
kde_qtver = @kde_qtver@
kde_servicesdir = @kde_servicesdir@
kde_servicetypesdir = @kde_servicetypesdir@
kde_sounddir = @kde_sounddir@
kde_styledir = @kde_styledir@
kde_templatesdir = @kde_templatesdir@
kde_wallpaperdir = @kde_wallpaperdir@
kde_widgetdir = @kde_widgetdir@
kdeinitdir = @kdeinitdir@
libdir = @libdir@
libexecdir = @libexecdir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
prefix = @prefix@
program_transform_name = @program_transform_name@
qt_includes = @qt_includes@
qt_libraries = @qt_libraries@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
sysconfdir = @sysconfdir@
taglib_includes = @taglib_includes@
taglib_libs = @taglib_libs@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
unsermake_enable_pch_FALSE = @unsermake_enable_pch_FALSE@
unsermake_enable_pch_TRUE = @unsermake_enable_pch_TRUE@
x_includes = @x_includes@
x_libraries = @x_libraries@
xdg_appsdir = @xdg_appsdir@
xdg_directorydir = @xdg_directorydir@
xdg_menudir = @xdg_menudir@

# set the include path for X, qt and KDE
INCLUDES = $(all_includes) $(taglib_includes)

# these are the headers for your project

# let automoc handle all of the meta source files (moc)
#>- METASOURCES = AUTO
KDE_ICON = yammi

# the application source, library search path, and link libraries
#>- yammi_SOURCES = main.cpp ApplyToAllBase.ui artsplayer.cpp artsplayer.h \
#>- 	CFrameHeader.cpp CFrameHeader.h ConsistencyCheckDialogBase.ui \
#>- 	ConsistencyCheckDialog.cpp ConsistencyCheckDialog.h \
#>- 	ConsistencyCheckParameter.h CVBitRate.cpp CVBitRate.h \
#>- 	DeleteDialog.ui dummyplayer.h foldercategories.cpp \
#>- 	foldercategories.h folder.cpp foldergroups.cpp foldergroups.h \
#>- 	folder.h foldermedia.cpp foldermedia.h foldersorted.cpp \
#>- 	foldersorted.h fuzzsrch.cpp fuzzsrch.h lineeditshift.cpp \
#>- 	lineeditshift.h Makefile.am Makefile.in mediaplayer.cpp \
#>- 	mediaplayer.h mp3_layer.cpp mp3_layer.h mydatetime.cpp \
#>- 	mydatetime.h mylist.cpp mylist.h mylistview.cpp mylistview.h \
#>- 	noatunplayer.cpp noatunplayer.h options.h \
#>- 	PreferencesDialogBase.ui preferencesdialog.cpp \
#>- 	preferencesdialog.h prefs.cpp prefs.h song.cpp songentry.cpp \
#>- 	songentry.h songentryint2.cpp songentryint2.h songentryint.cpp \
#>- 	songentryint.h songentrystring.cpp songentrystring.h \
#>- 	songentrytimestamp.cpp songentrytimestamp.h song.h \
#>- 	songinfo.cpp SongInfoDialog.ui songinfo.h songlistitem.cpp \
#>- 	songlistitem.h UpdateDatabaseDialogBase.ui \
#>- 	updatedatabasedialog.cpp updatedatabasedialog.h \
#>- 	UpdateDatabaseMediaDialogBase.ui updatedatabasemediadialog.cpp \
#>- 	updatedatabasemediadialog.h xmmsctrl.h xmmsplayer.cpp \
#>- 	xmmsplayer.h yammigui.cpp yammigui.h yammiicons.h \
#>- 	yammimodel.cpp yammimodel.h i18n.h \
#>- 	ConsistencyCheckParameter.cpp applytoalldialog.cpp \
#>- 	trackpositionslider.cpp util.cpp searchthread.cpp \
#>- 	yammidcopiface.skel yammiui.rc gstplayer.cpp
#>+ 27
yammi_SOURCES=main.cpp  artsplayer.cpp artsplayer.h \
	CFrameHeader.cpp CFrameHeader.h  \
	ConsistencyCheckDialog.cpp ConsistencyCheckDialog.h \
	ConsistencyCheckParameter.h CVBitRate.cpp CVBitRate.h \
	 dummyplayer.h foldercategories.cpp \
	foldercategories.h folder.cpp foldergroups.cpp foldergroups.h \
	folder.h foldermedia.cpp foldermedia.h foldersorted.cpp \
	foldersorted.h fuzzsrch.cpp fuzzsrch.h lineeditshift.cpp \
	lineeditshift.h Makefile.am Makefile.in mediaplayer.cpp \
	mediaplayer.h mp3_layer.cpp mp3_layer.h mydatetime.cpp \
	mydatetime.h mylist.cpp mylist.h mylistview.cpp mylistview.h \
	noatunplayer.cpp noatunplayer.h options.h \
	 preferencesdialog.cpp \
	preferencesdialog.h prefs.cpp prefs.h song.cpp songentry.cpp \
	songentry.h songentryint2.cpp songentryint2.h songentryint.cpp \
	songentryint.h songentrystring.cpp songentrystring.h \
	songentrytimestamp.cpp songentrytimestamp.h song.h \
	songinfo.cpp  songinfo.h songlistitem.cpp \
	songlistitem.h  \
	updatedatabasedialog.cpp updatedatabasedialog.h \
	 updatedatabasemediadialog.cpp \
	updatedatabasemediadialog.h xmmsctrl.h xmmsplayer.cpp \
	xmmsplayer.h yammigui.cpp yammigui.h yammiicons.h \
	yammimodel.cpp yammimodel.h i18n.h \
	ConsistencyCheckParameter.cpp applytoalldialog.cpp \
	trackpositionslider.cpp util.cpp searchthread.cpp \
	 yammiui.rc gstplayer.cpp yammidcopiface_skel.cpp ApplyToAllBase.cpp ConsistencyCheckDialogBase.cpp DeleteDialog.cpp PreferencesDialogBase.cpp SongInfoDialog.cpp UpdateDatabaseDialogBase.cpp UpdateDatabaseMediaDialogBase.cpp
yammi_LDFLAGS = $(KDE_RPATH) $(all_libraries)
yammi_LDADD = -lartskde -lkhtml $(LIB_KDEUI)

# this is where the desktop file will go 
shelldesktopdir = $(kde_appsdir)/Multimedia

# this is where the shell's XML-GUI resource file goes
shellrcdir = $(kde_datadir)/yammi
noinst_HEADERS = applytoalldialog.h trackpositionslider.h util.h searchthread.h yammidcopiface.h
SUBDIRS = icons
appsdir = $(kde_appsdir)/Multimedia
apps_DATA = yammi.desktop
#>- all: all-recursive
#>+ 1
all: docs-am  all-recursive

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
#>- $(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
#>+ 1
$(srcdir)/Makefile.in: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h   $(srcdir)/Makefile.am  $(am__configure_deps)
#>- 	@for dep in $?; do \
#>- 	  case '$(am__configure_deps)' in \
#>- 	    *$$dep*) \
#>- 	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
#>- 		&& exit 0; \
#>- 	      exit 1;; \
#>- 	  esac; \
#>- 	done; \
#>- 	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
#>- 	cd $(top_srcdir) && \
#>- 	  $(AUTOMAKE) --gnu  src/Makefile
#>+ 12
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
	cd $(top_srcdir) && perl admin/am_edit src/Makefile.in
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
yammi$(EXEEXT): $(yammi_OBJECTS) $(yammi_DEPENDENCIES) 
	@rm -f yammi$(EXEEXT)
	$(CXXLINK) $(yammi_LDFLAGS) $(yammi_OBJECTS) $(yammi_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/CFrameHeader.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/CVBitRate.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ConsistencyCheckDialog.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ConsistencyCheckParameter.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/applytoalldialog.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/artsplayer.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/folder.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/foldercategories.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/foldergroups.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/foldermedia.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/foldersorted.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fuzzsrch.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gstplayer.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lineeditshift.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/main.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mediaplayer.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mp3_layer.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mydatetime.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mylist.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mylistview.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/noatunplayer.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/preferencesdialog.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/prefs.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/searchthread.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/song.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/songentry.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/songentryint.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/songentryint2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/songentrystring.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/songentrytimestamp.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/songinfo.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/songlistitem.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/trackpositionslider.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/updatedatabasedialog.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/updatedatabasemediadialog.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/util.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xmmsplayer.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/yammigui.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/yammimodel.Po@am__quote@

.cpp.o:
@am__fastdepCXX_TRUE@	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
@am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
@am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
@am__fastdepCXX_TRUE@	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
@am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:
install-appsDATA: $(apps_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(appsdir)" || $(mkdir_p) "$(DESTDIR)$(appsdir)"
	@list='$(apps_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(appsDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(appsdir)/$$f'"; \
	  $(appsDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(appsdir)/$$f"; \
	done

uninstall-appsDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(apps_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(appsdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(appsdir)/$$f"; \
	done

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(mkdir_p) "$(distdir)/$$subdir" \
	    || exit 1; \
	    distdir=`$(am__cd) $(distdir) && pwd`; \
	    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$top_distdir" \
	        distdir="$$distdir/$$subdir" \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-recursive
all-am: Makefile $(PROGRAMS) $(DATA) $(HEADERS)
installdirs: installdirs-recursive
installdirs-am:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(appsdir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#>- clean: clean-recursive
#>+ 1
clean: kde-rpo-clean  clean-recursive

#>- clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am
#>+ 1
clean-am: clean-metasources clean-idl clean-ui clean-bcheck clean-final  clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

info: info-recursive

info-am:

install-data-am: install-appsDATA install-data-local

install-exec-am: install-binPROGRAMS

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-appsDATA uninstall-binPROGRAMS \
	uninstall-info-am

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am check check-am \
	clean clean-binPROGRAMS clean-generic clean-libtool \
	clean-recursive ctags ctags-recursive distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-recursive distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-appsDATA \
	install-binPROGRAMS install-data install-data-am \
	install-data-local install-exec install-exec-am install-info \
	install-info-am install-man install-strip installcheck \
	installcheck-am installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic maintainer-clean-recursive \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool mostlyclean-recursive pdf pdf-am ps ps-am \
	tags tags-recursive uninstall uninstall-am uninstall-appsDATA \
	uninstall-binPROGRAMS uninstall-info-am


messages: rc.cpp
	$(XGETTEXT) *.cpp -o $(podir)/yammi.pot

install-data-local:
#>- 	$(mkinstalldirs) $(kde_datadir)/yammi
#>+ 1
	$(mkinstalldirs) $(DESTDIR)$(kde_datadir)/yammi
#>- 	$(INSTALL_DATA) $(srcdir)/yammiui.rc $(kde_datadir)/yammi/yammiui.rc
#>+ 1
	$(INSTALL_DATA) $(srcdir)/yammiui.rc $(DESTDIR)$(kde_datadir)/yammi/yammiui.rc
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 5
yammidcopiface.kidl: $(srcdir)/yammidcopiface.h $(DCOP_DEPENDENCIES)
	$(DCOPIDL) $(srcdir)/yammidcopiface.h > yammidcopiface.kidl || ( rm -f yammidcopiface.kidl ; false )
yammidcopiface_skel.cpp: yammidcopiface.kidl
	$(DCOPIDL2CPP) --c++-suffix cpp --no-signals --no-stub yammidcopiface.kidl

#>+ 3
mediaplayer.moc.cpp: $(srcdir)/mediaplayer.h
	$(MOC) $(srcdir)/mediaplayer.h -o mediaplayer.moc.cpp

#>+ 2
mocs: mediaplayer.moc.cpp

#>+ 3
foldergroups.moc.cpp: $(srcdir)/foldergroups.h
	$(MOC) $(srcdir)/foldergroups.h -o foldergroups.moc.cpp

#>+ 2
mocs: foldergroups.moc.cpp

#>+ 3
gstplayer.moc.cpp: $(srcdir)/gstplayer.h
	$(MOC) $(srcdir)/gstplayer.h -o gstplayer.moc.cpp

#>+ 2
mocs: gstplayer.moc.cpp

#>+ 3
yammigui.moc.cpp: $(srcdir)/yammigui.h
	$(MOC) $(srcdir)/yammigui.h -o yammigui.moc.cpp

#>+ 2
mocs: yammigui.moc.cpp

#>+ 3
lineeditshift.moc.cpp: $(srcdir)/lineeditshift.h
	$(MOC) $(srcdir)/lineeditshift.h -o lineeditshift.moc.cpp

#>+ 2
mocs: lineeditshift.moc.cpp

#>+ 3
trackpositionslider.moc.cpp: $(srcdir)/trackpositionslider.h
	$(MOC) $(srcdir)/trackpositionslider.h -o trackpositionslider.moc.cpp

#>+ 2
mocs: trackpositionslider.moc.cpp

#>+ 3
artsplayer.moc.cpp: $(srcdir)/artsplayer.h
	$(MOC) $(srcdir)/artsplayer.h -o artsplayer.moc.cpp

#>+ 2
mocs: artsplayer.moc.cpp

#>+ 3
songinfo.moc.cpp: $(srcdir)/songinfo.h
	$(MOC) $(srcdir)/songinfo.h -o songinfo.moc.cpp

#>+ 2
mocs: songinfo.moc.cpp

#>+ 3
folder.moc.cpp: $(srcdir)/folder.h
	$(MOC) $(srcdir)/folder.h -o folder.moc.cpp

#>+ 2
mocs: folder.moc.cpp

#>+ 3
foldercategories.moc.cpp: $(srcdir)/foldercategories.h
	$(MOC) $(srcdir)/foldercategories.h -o foldercategories.moc.cpp

#>+ 2
mocs: foldercategories.moc.cpp

#>+ 3
updatedatabasedialog.moc.cpp: $(srcdir)/updatedatabasedialog.h
	$(MOC) $(srcdir)/updatedatabasedialog.h -o updatedatabasedialog.moc.cpp

#>+ 2
mocs: updatedatabasedialog.moc.cpp

#>+ 3
dummyplayer.moc.cpp: $(srcdir)/dummyplayer.h
	$(MOC) $(srcdir)/dummyplayer.h -o dummyplayer.moc.cpp

#>+ 2
mocs: dummyplayer.moc.cpp

#>+ 3
mylistview.moc.cpp: $(srcdir)/mylistview.h
	$(MOC) $(srcdir)/mylistview.h -o mylistview.moc.cpp

#>+ 2
mocs: mylistview.moc.cpp

#>+ 3
updatedatabasemediadialog.moc.cpp: $(srcdir)/updatedatabasemediadialog.h
	$(MOC) $(srcdir)/updatedatabasemediadialog.h -o updatedatabasemediadialog.moc.cpp

#>+ 2
mocs: updatedatabasemediadialog.moc.cpp

#>+ 3
applytoalldialog.moc.cpp: $(srcdir)/applytoalldialog.h
	$(MOC) $(srcdir)/applytoalldialog.h -o applytoalldialog.moc.cpp

#>+ 2
mocs: applytoalldialog.moc.cpp

#>+ 3
yammimodel.moc.cpp: $(srcdir)/yammimodel.h
	$(MOC) $(srcdir)/yammimodel.h -o yammimodel.moc.cpp

#>+ 2
mocs: yammimodel.moc.cpp

#>+ 3
preferencesdialog.moc.cpp: $(srcdir)/preferencesdialog.h
	$(MOC) $(srcdir)/preferencesdialog.h -o preferencesdialog.moc.cpp

#>+ 2
mocs: preferencesdialog.moc.cpp

#>+ 3
xmmsplayer.moc.cpp: $(srcdir)/xmmsplayer.h
	$(MOC) $(srcdir)/xmmsplayer.h -o xmmsplayer.moc.cpp

#>+ 2
mocs: xmmsplayer.moc.cpp

#>+ 3
foldermedia.moc.cpp: $(srcdir)/foldermedia.h
	$(MOC) $(srcdir)/foldermedia.h -o foldermedia.moc.cpp

#>+ 2
mocs: foldermedia.moc.cpp

#>+ 3
noatunplayer.moc.cpp: $(srcdir)/noatunplayer.h
	$(MOC) $(srcdir)/noatunplayer.h -o noatunplayer.moc.cpp

#>+ 2
mocs: noatunplayer.moc.cpp

#>+ 3
ConsistencyCheckDialog.moc.cpp: $(srcdir)/ConsistencyCheckDialog.h
	$(MOC) $(srcdir)/ConsistencyCheckDialog.h -o ConsistencyCheckDialog.moc.cpp

#>+ 2
mocs: ConsistencyCheckDialog.moc.cpp

#>+ 3
clean-metasources:
	-rm -f  mediaplayer.moc.cpp foldergroups.moc.cpp gstplayer.moc.cpp yammigui.moc.cpp lineeditshift.moc.cpp trackpositionslider.moc.cpp artsplayer.moc.cpp songinfo.moc.cpp folder.moc.cpp foldercategories.moc.cpp updatedatabasedialog.moc.cpp dummyplayer.moc.cpp mylistview.moc.cpp updatedatabasemediadialog.moc.cpp applytoalldialog.moc.cpp yammimodel.moc.cpp preferencesdialog.moc.cpp xmmsplayer.moc.cpp foldermedia.moc.cpp noatunplayer.moc.cpp ConsistencyCheckDialog.moc.cpp

#>+ 2
KDE_DIST=mp3tag.cpp DeleteDialog.ui mp3tag.h PreferencesDialogBase.ui UpdateDatabaseDialogBase.h ConsistencyCheckDialogBase.ui UpdateDatabaseMediaDialogBase.h ApplyToAllBase.ui SongInfoDialog.ui vcedit.c UpdateDatabaseMediaDialogBase.ui SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h CMP3Info.h PreferencesDialogBase.ui.h gstplayer.h glibconfig.h UpdateDatabaseDialogBase.ui ConsistencyCheckDialogBase.h yammi.desktop Unknown CMP3Info.cpp vcedit.h ApplyToAllBase.h glib.h 

#>+ 4
clean-idl:
	-rm -f \
	yammidcopiface_skel.cpp yammidcopiface_skel.h yammidcopiface.kidl 

#>+ 10
clean-ui:
	-rm -f \
	ApplyToAllBase.cpp ApplyToAllBase.h ApplyToAllBase.moc \
	ConsistencyCheckDialogBase.cpp ConsistencyCheckDialogBase.h ConsistencyCheckDialogBase.moc \
	DeleteDialog.cpp DeleteDialog.h DeleteDialog.moc \
	PreferencesDialogBase.cpp PreferencesDialogBase.h PreferencesDialogBase.moc \
	SongInfoDialog.cpp SongInfoDialog.h SongInfoDialog.moc \
	UpdateDatabaseDialogBase.cpp UpdateDatabaseDialogBase.h UpdateDatabaseDialogBase.moc \
	UpdateDatabaseMediaDialogBase.cpp UpdateDatabaseMediaDialogBase.h UpdateDatabaseMediaDialogBase.moc 

#>+ 2
docs-am:

#>+ 15
force-reedit:
		@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
	cd $(top_srcdir) && perl admin/am_edit src/Makefile.in


#>+ 21
clean-bcheck: 
	rm -f *.bchecktest.cc *.bchecktest.cc.class a.out

bcheck: bcheck-recursive

bcheck-am:
	@for i in ; do \
	    if test $(srcdir)/$$i -nt $$i.bchecktest.cc; then \
	        echo "int main() {return 0;}" > $$i.bchecktest.cc ; \
	        echo "#include \"$$i\"" >> $$i.bchecktest.cc ; \
	        echo "$$i"; \
	        if ! $(CXXCOMPILE)  --dump-class-hierarchy -c $$i.bchecktest.cc; then \
	            rm -f $$i.bchecktest.cc; exit 1; \
	        fi ; \
	        echo "" >> $$i.bchecktest.cc.class; \
	        perl $(top_srcdir)/admin/bcheck.pl $$i.bchecktest.cc.class || { rm -f $$i.bchecktest.cc; exit 1; }; \
	        rm -f a.out; \
	    fi ; \
	done


#>+ 11
yammi.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/main.cpp $(srcdir)/artsplayer.cpp $(srcdir)/CFrameHeader.cpp $(srcdir)/ConsistencyCheckDialog.cpp $(srcdir)/CVBitRate.cpp $(srcdir)/foldercategories.cpp $(srcdir)/folder.cpp $(srcdir)/foldergroups.cpp $(srcdir)/foldermedia.cpp $(srcdir)/foldersorted.cpp $(srcdir)/fuzzsrch.cpp $(srcdir)/lineeditshift.cpp $(srcdir)/mediaplayer.cpp $(srcdir)/mp3_layer.cpp $(srcdir)/mydatetime.cpp $(srcdir)/mylist.cpp $(srcdir)/mylistview.cpp $(srcdir)/noatunplayer.cpp $(srcdir)/preferencesdialog.cpp $(srcdir)/prefs.cpp $(srcdir)/song.cpp $(srcdir)/songentry.cpp $(srcdir)/songentryint2.cpp $(srcdir)/songentryint.cpp $(srcdir)/songentrystring.cpp $(srcdir)/songentrytimestamp.cpp $(srcdir)/songinfo.cpp $(srcdir)/songlistitem.cpp $(srcdir)/updatedatabasedialog.cpp $(srcdir)/updatedatabasemediadialog.cpp $(srcdir)/xmmsplayer.cpp $(srcdir)/yammigui.cpp $(srcdir)/yammimodel.cpp $(srcdir)/ConsistencyCheckParameter.cpp $(srcdir)/applytoalldialog.cpp $(srcdir)/trackpositionslider.cpp $(srcdir)/util.cpp $(srcdir)/searchthread.cpp $(srcdir)/gstplayer.cpp yammidcopiface_skel.cpp ApplyToAllBase.cpp ConsistencyCheckDialogBase.cpp DeleteDialog.cpp PreferencesDialogBase.cpp SongInfoDialog.cpp UpdateDatabaseDialogBase.cpp UpdateDatabaseMediaDialogBase.cpp mediaplayer.moc.cpp yammigui.moc.cpp gstplayer.moc.cpp foldergroups.moc.cpp lineeditshift.moc.cpp trackpositionslider.moc.cpp artsplayer.moc.cpp foldercategories.moc.cpp folder.moc.cpp songinfo.moc.cpp updatedatabasedialog.moc.cpp dummyplayer.moc.cpp mylistview.moc.cpp updatedatabasemediadialog.moc.cpp applytoalldialog.moc.cpp xmmsplayer.moc.cpp preferencesdialog.moc.cpp yammimodel.moc.cpp foldermedia.moc.cpp noatunplayer.moc.cpp ConsistencyCheckDialog.moc.cpp  SongInfoDialog.moc PreferencesDialogBase.moc ConsistencyCheckDialogBase.moc UpdateDatabaseMediaDialogBase.moc DeleteDialog.moc ApplyToAllBase.moc UpdateDatabaseDialogBase.moc
	@echo 'creating yammi.all_cpp.cpp ...'; \
	rm -f yammi.all_cpp.files yammi.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> yammi.all_cpp.final; \
	for file in main.cpp artsplayer.cpp CFrameHeader.cpp ConsistencyCheckDialog.cpp CVBitRate.cpp foldercategories.cpp folder.cpp foldergroups.cpp foldermedia.cpp foldersorted.cpp fuzzsrch.cpp lineeditshift.cpp mediaplayer.cpp mp3_layer.cpp mydatetime.cpp mylist.cpp mylistview.cpp noatunplayer.cpp preferencesdialog.cpp prefs.cpp song.cpp songentry.cpp songentryint2.cpp songentryint.cpp songentrystring.cpp songentrytimestamp.cpp songinfo.cpp songlistitem.cpp updatedatabasedialog.cpp updatedatabasemediadialog.cpp xmmsplayer.cpp yammigui.cpp yammimodel.cpp ConsistencyCheckParameter.cpp applytoalldialog.cpp trackpositionslider.cpp util.cpp searchthread.cpp gstplayer.cpp yammidcopiface_skel.cpp ApplyToAllBase.cpp ConsistencyCheckDialogBase.cpp DeleteDialog.cpp PreferencesDialogBase.cpp SongInfoDialog.cpp UpdateDatabaseDialogBase.cpp UpdateDatabaseMediaDialogBase.cpp mediaplayer.moc.cpp yammigui.moc.cpp gstplayer.moc.cpp foldergroups.moc.cpp lineeditshift.moc.cpp trackpositionslider.moc.cpp artsplayer.moc.cpp foldercategories.moc.cpp folder.moc.cpp songinfo.moc.cpp updatedatabasedialog.moc.cpp dummyplayer.moc.cpp mylistview.moc.cpp updatedatabasemediadialog.moc.cpp applytoalldialog.moc.cpp xmmsplayer.moc.cpp preferencesdialog.moc.cpp yammimodel.moc.cpp foldermedia.moc.cpp noatunplayer.moc.cpp ConsistencyCheckDialog.moc.cpp ; do \
	  echo "#include \"$$file\"" >> yammi.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> yammi.all_cpp.final; \
	done; \
	cat yammi.all_cpp.final yammi.all_cpp.files > yammi.all_cpp.cpp; \
	rm -f yammi.all_cpp.final yammi.all_cpp.files

#>+ 3
clean-final:
	-rm -f yammi.all_cpp.cpp

#>+ 3
final:
	$(MAKE) yammi_OBJECTS="$(yammi_final_OBJECTS)" all-am

#>+ 3
final-install:
	$(MAKE) yammi_OBJECTS="$(yammi_final_OBJECTS)" install-am

#>+ 3
no-final:
	$(MAKE) yammi_OBJECTS="$(yammi_nofinal_OBJECTS)" all-am

#>+ 3
no-final-install:
	$(MAKE) yammi_OBJECTS="$(yammi_nofinal_OBJECTS)" install-am

#>+ 3
cvs-clean:
	$(MAKE) admindir=$(top_srcdir)/admin -f $(top_srcdir)/admin/Makefile.common cvs-clean

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 82
$(srcdir)/dummyplayer.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/fuzzsrch.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songentry.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/prefs.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/main.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/foldercategories.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/mp3_layer.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songentryint.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/xmmsplayer.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/trackpositionslider.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/updatedatabasemediadialog.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/xmmsplayer.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songlistitem.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/foldermedia.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/CFrameHeader.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/mylist.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
nmcheck-am: nmcheck
$(srcdir)/Makefile.am: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/ConsistencyCheckDialog.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songentryint2.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/mylistview.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songinfo.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/mylist.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/CFrameHeader.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/mediaplayer.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songentryint.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/mydatetime.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/yammigui.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/foldersorted.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/ConsistencyCheckParameter.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songinfo.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/preferencesdialog.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/foldersorted.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/CVBitRate.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/updatedatabasemediadialog.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/song.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/mydatetime.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/song.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/noatunplayer.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/yammiicons.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/foldermedia.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/ConsistencyCheckParameter.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/mediaplayer.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/ConsistencyCheckDialog.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/lineeditshift.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songentryint2.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songentry.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songentrytimestamp.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/applytoalldialog.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/xmmsctrl.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/gstplayer.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/options.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/mp3_layer.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/fuzzsrch.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/foldergroups.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songentrystring.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/util.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/yammimodel.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songentrystring.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/artsplayer.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/foldergroups.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/preferencesdialog.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/foldercategories.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/lineeditshift.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/artsplayer.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/updatedatabasedialog.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/i18n.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/mylistview.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/yammimodel.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/yammiui.rc: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/updatedatabasedialog.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/prefs.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/noatunplayer.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
nmcheck: 
$(srcdir)/yammigui.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/folder.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songlistitem.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/CVBitRate.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/songentrytimestamp.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/searchthread.cpp: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 
$(srcdir)/folder.h: ApplyToAllBase.h ConsistencyCheckDialogBase.h DeleteDialog.h PreferencesDialogBase.h SongInfoDialog.h UpdateDatabaseDialogBase.h UpdateDatabaseMediaDialogBase.h 

#>+ 105
SongInfoDialog.cpp: $(srcdir)/SongInfoDialog.ui SongInfoDialog.h SongInfoDialog.moc
	rm -f SongInfoDialog.cpp
	echo '#include <kdialog.h>' > SongInfoDialog.cpp
	echo '#include <klocale.h>' >> SongInfoDialog.cpp
	$(UIC) -tr ${UIC_TR} -i SongInfoDialog.h $(srcdir)/SongInfoDialog.ui > SongInfoDialog.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" SongInfoDialog.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_SongInfoDialog,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> SongInfoDialog.cpp ;\
	rm -f SongInfoDialog.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "SongInfoDialog.moc"' >> SongInfoDialog.cpp; else rm -f SongInfoDialog.cpp ; exit $$ret ; fi

SongInfoDialog.h: $(srcdir)/SongInfoDialog.ui
	rm -rf SongInfoDialog.h;
	$(UIC) $(srcdir)/SongInfoDialog.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> SongInfoDialog.h ;
SongInfoDialog.moc: SongInfoDialog.h
	$(MOC) SongInfoDialog.h -o SongInfoDialog.moc

ApplyToAllBase.cpp: $(srcdir)/ApplyToAllBase.ui ApplyToAllBase.h ApplyToAllBase.moc
	rm -f ApplyToAllBase.cpp
	echo '#include <kdialog.h>' > ApplyToAllBase.cpp
	echo '#include <klocale.h>' >> ApplyToAllBase.cpp
	$(UIC) -tr ${UIC_TR} -i ApplyToAllBase.h $(srcdir)/ApplyToAllBase.ui > ApplyToAllBase.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" ApplyToAllBase.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_ApplyToAllBase,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> ApplyToAllBase.cpp ;\
	rm -f ApplyToAllBase.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "ApplyToAllBase.moc"' >> ApplyToAllBase.cpp; else rm -f ApplyToAllBase.cpp ; exit $$ret ; fi

ApplyToAllBase.h: $(srcdir)/ApplyToAllBase.ui
	rm -rf ApplyToAllBase.h;
	$(UIC) $(srcdir)/ApplyToAllBase.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> ApplyToAllBase.h ;
ApplyToAllBase.moc: ApplyToAllBase.h
	$(MOC) ApplyToAllBase.h -o ApplyToAllBase.moc

UpdateDatabaseMediaDialogBase.cpp: $(srcdir)/UpdateDatabaseMediaDialogBase.ui UpdateDatabaseMediaDialogBase.h UpdateDatabaseMediaDialogBase.moc
	rm -f UpdateDatabaseMediaDialogBase.cpp
	echo '#include <kdialog.h>' > UpdateDatabaseMediaDialogBase.cpp
	echo '#include <klocale.h>' >> UpdateDatabaseMediaDialogBase.cpp
	$(UIC) -tr ${UIC_TR} -i UpdateDatabaseMediaDialogBase.h $(srcdir)/UpdateDatabaseMediaDialogBase.ui > UpdateDatabaseMediaDialogBase.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" UpdateDatabaseMediaDialogBase.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_UpdateDatabaseMediaDialogBase,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> UpdateDatabaseMediaDialogBase.cpp ;\
	rm -f UpdateDatabaseMediaDialogBase.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "UpdateDatabaseMediaDialogBase.moc"' >> UpdateDatabaseMediaDialogBase.cpp; else rm -f UpdateDatabaseMediaDialogBase.cpp ; exit $$ret ; fi

UpdateDatabaseMediaDialogBase.h: $(srcdir)/UpdateDatabaseMediaDialogBase.ui
	rm -rf UpdateDatabaseMediaDialogBase.h;
	$(UIC) $(srcdir)/UpdateDatabaseMediaDialogBase.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> UpdateDatabaseMediaDialogBase.h ;
UpdateDatabaseMediaDialogBase.moc: UpdateDatabaseMediaDialogBase.h
	$(MOC) UpdateDatabaseMediaDialogBase.h -o UpdateDatabaseMediaDialogBase.moc

ConsistencyCheckDialogBase.cpp: $(srcdir)/ConsistencyCheckDialogBase.ui ConsistencyCheckDialogBase.h ConsistencyCheckDialogBase.moc
	rm -f ConsistencyCheckDialogBase.cpp
	echo '#include <kdialog.h>' > ConsistencyCheckDialogBase.cpp
	echo '#include <klocale.h>' >> ConsistencyCheckDialogBase.cpp
	$(UIC) -tr ${UIC_TR} -i ConsistencyCheckDialogBase.h $(srcdir)/ConsistencyCheckDialogBase.ui > ConsistencyCheckDialogBase.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" ConsistencyCheckDialogBase.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_ConsistencyCheckDialogBase,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> ConsistencyCheckDialogBase.cpp ;\
	rm -f ConsistencyCheckDialogBase.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "ConsistencyCheckDialogBase.moc"' >> ConsistencyCheckDialogBase.cpp; else rm -f ConsistencyCheckDialogBase.cpp ; exit $$ret ; fi

ConsistencyCheckDialogBase.h: $(srcdir)/ConsistencyCheckDialogBase.ui
	rm -rf ConsistencyCheckDialogBase.h;
	$(UIC) $(srcdir)/ConsistencyCheckDialogBase.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> ConsistencyCheckDialogBase.h ;
ConsistencyCheckDialogBase.moc: ConsistencyCheckDialogBase.h
	$(MOC) ConsistencyCheckDialogBase.h -o ConsistencyCheckDialogBase.moc

PreferencesDialogBase.cpp: $(srcdir)/PreferencesDialogBase.ui PreferencesDialogBase.h PreferencesDialogBase.moc
	rm -f PreferencesDialogBase.cpp
	echo '#include <kdialog.h>' > PreferencesDialogBase.cpp
	echo '#include <klocale.h>' >> PreferencesDialogBase.cpp
	$(UIC) -tr ${UIC_TR} -i PreferencesDialogBase.h $(srcdir)/PreferencesDialogBase.ui > PreferencesDialogBase.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" PreferencesDialogBase.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_PreferencesDialogBase,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> PreferencesDialogBase.cpp ;\
	rm -f PreferencesDialogBase.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "PreferencesDialogBase.moc"' >> PreferencesDialogBase.cpp; else rm -f PreferencesDialogBase.cpp ; exit $$ret ; fi

PreferencesDialogBase.h: $(srcdir)/PreferencesDialogBase.ui
	rm -rf PreferencesDialogBase.h;
	$(UIC) $(srcdir)/PreferencesDialogBase.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> PreferencesDialogBase.h ;
PreferencesDialogBase.moc: PreferencesDialogBase.h
	$(MOC) PreferencesDialogBase.h -o PreferencesDialogBase.moc

DeleteDialog.cpp: $(srcdir)/DeleteDialog.ui DeleteDialog.h DeleteDialog.moc
	rm -f DeleteDialog.cpp
	echo '#include <kdialog.h>' > DeleteDialog.cpp
	echo '#include <klocale.h>' >> DeleteDialog.cpp
	$(UIC) -tr ${UIC_TR} -i DeleteDialog.h $(srcdir)/DeleteDialog.ui > DeleteDialog.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" DeleteDialog.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_DeleteDialog,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> DeleteDialog.cpp ;\
	rm -f DeleteDialog.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "DeleteDialog.moc"' >> DeleteDialog.cpp; else rm -f DeleteDialog.cpp ; exit $$ret ; fi

DeleteDialog.h: $(srcdir)/DeleteDialog.ui
	rm -rf DeleteDialog.h;
	$(UIC) $(srcdir)/DeleteDialog.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> DeleteDialog.h ;
DeleteDialog.moc: DeleteDialog.h
	$(MOC) DeleteDialog.h -o DeleteDialog.moc

UpdateDatabaseDialogBase.cpp: $(srcdir)/UpdateDatabaseDialogBase.ui UpdateDatabaseDialogBase.h UpdateDatabaseDialogBase.moc
	rm -f UpdateDatabaseDialogBase.cpp
	echo '#include <kdialog.h>' > UpdateDatabaseDialogBase.cpp
	echo '#include <klocale.h>' >> UpdateDatabaseDialogBase.cpp
	$(UIC) -tr ${UIC_TR} -i UpdateDatabaseDialogBase.h $(srcdir)/UpdateDatabaseDialogBase.ui > UpdateDatabaseDialogBase.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" UpdateDatabaseDialogBase.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_UpdateDatabaseDialogBase,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> UpdateDatabaseDialogBase.cpp ;\
	rm -f UpdateDatabaseDialogBase.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "UpdateDatabaseDialogBase.moc"' >> UpdateDatabaseDialogBase.cpp; else rm -f UpdateDatabaseDialogBase.cpp ; exit $$ret ; fi

UpdateDatabaseDialogBase.h: $(srcdir)/UpdateDatabaseDialogBase.ui
	rm -rf UpdateDatabaseDialogBase.h;
	$(UIC) $(srcdir)/UpdateDatabaseDialogBase.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> UpdateDatabaseDialogBase.h ;
UpdateDatabaseDialogBase.moc: UpdateDatabaseDialogBase.h
	$(MOC) UpdateDatabaseDialogBase.h -o UpdateDatabaseDialogBase.moc

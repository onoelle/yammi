# KDE tags expanded automatically by am_edit - $Revision: 1.6 $ 
# Makefile.in generated automatically by automake 1.4 from Makefile.am

# Copyright (C) 1994, 1995-8, 1999 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

####### kdevelop will overwrite this part!!! (begin)##########


SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
#>- 
bindir = @bindir@
#>+ 3
DEPDIR = .deps

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@ $(AM_INSTALL_PROGRAM_FLAGS)
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_alias = @build_alias@
build_triplet = @build@
host_alias = @host_alias@
host_triplet = @host@
target_alias = @target_alias@
target_triplet = @target@
ARTSCCONFIG = @ARTSCCONFIG@
AS = @AS@
AUTODIRS = @AUTODIRS@
CC = @CC@
CONF_FILES = @CONF_FILES@
CPP = @CPP@
CXX = @CXX@
CXXCPP = @CXXCPP@
DCOPIDL = @DCOPIDL@
DCOPIDL2CPP = @DCOPIDL2CPP@
DCOP_DEPENDENCIES = @DCOP_DEPENDENCIES@
DLLTOOL = @DLLTOOL@
DPMSINC = @DPMSINC@
DPMSLIB = @DPMSLIB@
EXEEXT = @EXEEXT@
GCJ = @GCJ@
GCJFLAGS = @GCJFLAGS@
GLINC = @GLINC@
GLLIB = @GLLIB@
GMSGFMT = @GMSGFMT@
IDL = @IDL@
IDL_DEPENDENCIES = @IDL_DEPENDENCIES@
JAR = @JAR@
JAVAC = @JAVAC@
JAVAH = @JAVAH@
JVMLIBS = @JVMLIBS@
KDECONFIG = @KDECONFIG@
KDE_CXXFLAGS = @KDE_CXXFLAGS@
KDE_EXTRA_RPATH = @KDE_EXTRA_RPATH@
KDE_INCLUDES = @KDE_INCLUDES@
KDE_LDFLAGS = @KDE_LDFLAGS@
KDE_PLUGIN = @KDE_PLUGIN@
KDE_RPATH = @KDE_RPATH@
KDE_USE_CLOSURE_FALSE = @KDE_USE_CLOSURE_FALSE@
KDE_USE_CLOSURE_TRUE = @KDE_USE_CLOSURE_TRUE@
KDE_USE_FINAL_FALSE = @KDE_USE_FINAL_FALSE@
KDE_USE_FINAL_TRUE = @KDE_USE_FINAL_TRUE@
KDE_XSL_STYLESHEET = @KDE_XSL_STYLESHEET@
LIBCOMPAT = @LIBCOMPAT@
LIBCRYPT = @LIBCRYPT@
LIBDL = @LIBDL@
LIBGEN = @LIBGEN@
LIBJPEG = @LIBJPEG@
LIBMICO = @LIBMICO@
LIBOBJS = @LIBOBJS@
LIBPNG = @LIBPNG@
LIBPTHREAD = @LIBPTHREAD@
LIBPYTHON = @LIBPYTHON@
LIBQIMGIO = @LIBQIMGIO@
LIBRESOLV = @LIBRESOLV@
LIBSHADOW = @LIBSHADOW@
LIBSM = @LIBSM@
LIBSOCKET = @LIBSOCKET@
LIBTIFF = @LIBTIFF@
LIBTOOL = @LIBTOOL@
LIBUCB = @LIBUCB@
LIBUTIL = @LIBUTIL@
LIBXINERAMA = @LIBXINERAMA@
LIBZ = @LIBZ@
LIB_KAB = @LIB_KAB@
LIB_KDECORE = @LIB_KDECORE@
LIB_KDEUI = @LIB_KDEUI@
LIB_KFILE = @LIB_KFILE@
LIB_KFM = @LIB_KFM@
LIB_KFORMULA = @LIB_KFORMULA@
LIB_KHTML = @LIB_KHTML@
LIB_KIMGIO = @LIB_KIMGIO@
LIB_KIO = @LIB_KIO@
LIB_KPARTS = @LIB_KPARTS@
LIB_KSPELL = @LIB_KSPELL@
LIB_KSYCOCA = @LIB_KSYCOCA@
LIB_KWRITE = @LIB_KWRITE@
LIB_QT = @LIB_QT@
LIB_SMB = @LIB_SMB@
LIB_X11 = @LIB_X11@
LN_S = @LN_S@
MAKEINFO = @MAKEINFO@
MCOPIDL = @MCOPIDL@
MEINPROC = @MEINPROC@
MICO_INCLUDES = @MICO_INCLUDES@
MICO_LDFLAGS = @MICO_LDFLAGS@
MOC = @MOC@
MSGFMT = @MSGFMT@
NOOPT_CXXFLAGS = @NOOPT_CXXFLAGS@
NOREPO = @NOREPO@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PAMLIBS = @PAMLIBS@
PASSWDLIBS = @PASSWDLIBS@
PYTHONINC = @PYTHONINC@
PYTHONLIB = @PYTHONLIB@
PYTHONMODDIR = @PYTHONMODDIR@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
RANLIB = @RANLIB@
REPO = @REPO@
SETUIDFLAGS = @SETUIDFLAGS@
STRIP = @STRIP@
TOPSUBDIRS = @TOPSUBDIRS@
UIC = @UIC@
USER_INCLUDES = @USER_INCLUDES@
USER_LDFLAGS = @USER_LDFLAGS@
USE_EXCEPTIONS = @USE_EXCEPTIONS@
USE_RTTI = @USE_RTTI@
USE_THREADS = @USE_THREADS@
VERSION = @VERSION@
XGETTEXT = @XGETTEXT@
XPMINC = @XPMINC@
XPMLIB = @XPMLIB@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_INCLUDES = @X_INCLUDES@
X_LDFLAGS = @X_LDFLAGS@
X_PRE_LIBS = @X_PRE_LIBS@
all_includes = @all_includes@
all_libraries = @all_libraries@
idldir = @idldir@
jni_includes = @jni_includes@
kde_appsdir = @kde_appsdir@
kde_bindir = @kde_bindir@
kde_confdir = @kde_confdir@
kde_datadir = @kde_datadir@
kde_htmldir = @kde_htmldir@
kde_icondir = @kde_icondir@
kde_includes = @kde_includes@
kde_libraries = @kde_libraries@
kde_libs_htmldir = @kde_libs_htmldir@
kde_libs_prefix = @kde_libs_prefix@
kde_locale = @kde_locale@
kde_mimedir = @kde_mimedir@
kde_moduledir = @kde_moduledir@
kde_servicesdir = @kde_servicesdir@
kde_servicetypesdir = @kde_servicetypesdir@
kde_sounddir = @kde_sounddir@
kde_templatesdir = @kde_templatesdir@
kde_wallpaperdir = @kde_wallpaperdir@
micodir = @micodir@
qt_includes = @qt_includes@
qt_libraries = @qt_libraries@
x_includes = @x_includes@
x_libraries = @x_libraries@

bin_PROGRAMS = yammi
#>- yammi_SOURCES = songentrystring.cpp songentryint.cpp songentrytimestamp.cpp songentry.cpp YammiGuiBase.ui mylistview.cpp preferencesdialog.cpp yammimodel.cpp yammigui.cpp songlistitem.cpp SongInfoDialog.ui songinfo.cpp song.cpp prefs.cpp PreferencesDialogBase.ui mylist.cpp mydatetime.cpp mp3tag.cpp mp3_layer.cpp fuzzsrch.cpp foldermedia.cpp foldergroups.cpp foldercategories.cpp folder.cpp DeleteDialog.ui main.cpp 
#>+ 1
yammi_SOURCES=songentrystring.cpp songentryint.cpp songentrytimestamp.cpp songentry.cpp  mylistview.cpp preferencesdialog.cpp yammimodel.cpp yammigui.cpp songlistitem.cpp  songinfo.cpp song.cpp prefs.cpp  mylist.cpp mydatetime.cpp mp3tag.cpp mp3_layer.cpp fuzzsrch.cpp foldermedia.cpp foldergroups.cpp foldercategories.cpp folder.cpp  main.cpp  YammiGuiBase.cpp SongInfoDialog.cpp PreferencesDialogBase.cpp DeleteDialog.cpp
SOURCES = songentrystring.cpp songentryint.cpp songentrytimestamp.cpp songentry.cpp mylistview.cpp preferencesdialog.cpp yammimodel.cpp yammigui.cpp songlistitem.cpp songinfo.cpp song.cpp prefs.cpp mylist.cpp mydatetime.cpp mp3tag.cpp mp3_layer.cpp fuzzsrch.cpp foldermedia.cpp foldergroups.cpp foldercategories.cpp folder.cpp main.cpp 
INTERFACES = YammiGuiBase.ui SongInfoDialog.ui PreferencesDialogBase.ui DeleteDialog.ui 
TRANSLATIONS = 

# this is to enable Qt behavoir of am_edit
KDE_OPTIONS = qtonly
yammi_LDADD = -lxmms $(LIB_QT) $(LIBSOCKET)

SUBDIRS = docs 

EXTRA_DIST = main.cpp lo32-app-yammi.png lo16-app-yammi.png filenew.xpm filesave.xpm fileopen.xpm clearPlaylist.xpm DeleteDialog.ui folder.cpp folder.h foldercategories.cpp foldercategories.h foldergroups.cpp foldergroups.h foldermedia.cpp foldermedia.h fuzzsrch.cpp fuzzsrch.h in.xpm mp3_layer.cpp mp3_layer.h mp3tag.cpp mp3tag.h mydatetime.cpp mydatetime.h mylist.cpp mylist.h notin.xpm pause.xpm PreferencesDialogBase.ui prefs.cpp prefs.h skipbackward.xpm skipforward.xpm song.cpp song.h songinfo.cpp songinfo.h SongInfoDialog.ui songlistitem.cpp songlistitem.h yammigui.cpp yammigui.h yammimodel.cpp yammimodel.h preferencesdialog.cpp preferencesdialog.h defaultMiddleClick.xpm defaultDoubleClick.xpm mylistview.cpp mylistview.h YammiGuiBase.ui enqueue.xpm enqueueasnext.xpm playnow.xpm dequeueSong.xpm prelisten.xpm songinfo.xpm stopPrelisten.xpm songentry.cpp songentry.h songentrytimestamp.cpp songentrytimestamp.h songentryint.cpp songentryint.h songentrystring.cpp songentrystring.h 

####### kdevelop will overwrite this part!!! (end)############

# set the include path for X, qt and KDE
INCLUDES = $(all_includes)

#>- yammi_METASOURCES = AUTO

# the library search path. 
yammi_LDFLAGS = $(all_libraries) 

# them while "make clean", use CLEANFILES
DISTCLEANFILES = $(yammi_METASOURCES)
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = ../config.h
CONFIG_CLEAN_FILES = 
bin_PROGRAMS =  yammi$(EXEEXT)
PROGRAMS =  $(bin_PROGRAMS)


DEFS = @DEFS@ -I. -I$(srcdir) -I..
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
#>- yammi_OBJECTS =  songentrystring.$(OBJEXT) songentryint.$(OBJEXT) \
#>- songentrytimestamp.$(OBJEXT) songentry.$(OBJEXT) mylistview.$(OBJEXT) \
#>- preferencesdialog.$(OBJEXT) yammimodel.$(OBJEXT) yammigui.$(OBJEXT) \
#>- songlistitem.$(OBJEXT) songinfo.$(OBJEXT) song.$(OBJEXT) \
#>- prefs.$(OBJEXT) mylist.$(OBJEXT) mydatetime.$(OBJEXT) mp3tag.$(OBJEXT) \
#>- mp3_layer.$(OBJEXT) fuzzsrch.$(OBJEXT) foldermedia.$(OBJEXT) \
#>- foldergroups.$(OBJEXT) foldercategories.$(OBJEXT) folder.$(OBJEXT) \
#>- main.$(OBJEXT)
#>+ 12
yammi_final_OBJECTS = yammi.all_cpp.o 
yammi_nofinal_OBJECTS = songentrystring.$(OBJEXT) songentryint.$(OBJEXT) \
songentrytimestamp.$(OBJEXT) songentry.$(OBJEXT) mylistview.$(OBJEXT) \
preferencesdialog.$(OBJEXT) yammimodel.$(OBJEXT) yammigui.$(OBJEXT) \
songlistitem.$(OBJEXT) songinfo.$(OBJEXT) song.$(OBJEXT) \
prefs.$(OBJEXT) mylist.$(OBJEXT) mydatetime.$(OBJEXT) mp3tag.$(OBJEXT) \
mp3_layer.$(OBJEXT) fuzzsrch.$(OBJEXT) foldermedia.$(OBJEXT) \
foldergroups.$(OBJEXT) foldercategories.$(OBJEXT) folder.$(OBJEXT) \
main.$(OBJEXT)\
foldercategories.moc.o yammigui.moc.o foldergroups.moc.o folder.moc.o foldermedia.moc.o yammimodel.moc.o songinfo.moc.o preferencesdialog.moc.o mylistview.moc.o  YammiGuiBase.$(OBJEXT) SongInfoDialog.$(OBJEXT) PreferencesDialogBase.$(OBJEXT) DeleteDialog.$(OBJEXT)
@KDE_USE_FINAL_FALSE@yammi_OBJECTS = $(yammi_nofinal_OBJECTS)
@KDE_USE_FINAL_TRUE@yammi_OBJECTS = $(yammi_final_OBJECTS)
yammi_DEPENDENCIES = 
CXXFLAGS = @CXXFLAGS@
#>- CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 1
CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 1
LTCXXCOMPILE = $(LIBTOOL) --mode=compile --tag=CXX $(CXX) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(LDFLAGS) -o $@
#>+ 1
CXXLINK = $(LIBTOOL) --mode=link --tag=CXX $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) $(LDFLAGS) -o $@
DIST_COMMON =  Makefile.am Makefile.in


#>- DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)
#>+ 4
KDE_DIST=DeleteDialog.h PreferencesDialogBase.h YammiGuiBase.h SongInfoDialog.h 

DISTFILES= $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)


TAR = tar
GZIP_ENV = --best
#>- DEP_FILES =  .deps/folder.P .deps/foldercategories.P \
#>- .deps/foldergroups.P .deps/foldermedia.P .deps/fuzzsrch.P .deps/main.P \
#>- .deps/mp3_layer.P .deps/mp3tag.P .deps/mydatetime.P .deps/mylist.P \
#>- .deps/mylistview.P .deps/preferencesdialog.P .deps/prefs.P .deps/song.P \
#>- .deps/songentry.P .deps/songentryint.P .deps/songentrystring.P \
#>- .deps/songentrytimestamp.P .deps/songinfo.P .deps/songlistitem.P \
#>- .deps/yammigui.P .deps/yammimodel.P
#>+ 16
@KDE_USE_FINAL_TRUE@DEP_FILES =  $(DEPDIR)/foldercategories.moc.P $(DEPDIR)/yammigui.moc.P $(DEPDIR)/foldergroups.moc.P $(DEPDIR)/folder.moc.P $(DEPDIR)/foldermedia.moc.P $(DEPDIR)/yammimodel.moc.P $(DEPDIR)/songinfo.moc.P $(DEPDIR)/preferencesdialog.moc.P $(DEPDIR)/mylistview.moc.P $(DEPDIR)/YammiGuiBase.P $(DEPDIR)/SongInfoDialog.P $(DEPDIR)/PreferencesDialogBase.P $(DEPDIR)/DeleteDialog.P  $(DEPDIR)/yammi.all_cpp.P \
	  .deps/folder.P .deps/foldercategories.P \
.deps/foldergroups.P .deps/foldermedia.P .deps/fuzzsrch.P .deps/main.P \
.deps/mp3_layer.P .deps/mp3tag.P .deps/mydatetime.P .deps/mylist.P \
.deps/mylistview.P .deps/preferencesdialog.P .deps/prefs.P .deps/song.P \
.deps/songentry.P .deps/songentryint.P .deps/songentrystring.P \
.deps/songentrytimestamp.P .deps/songinfo.P .deps/songlistitem.P \
.deps/yammigui.P .deps/yammimodel.P
@KDE_USE_FINAL_FALSE@DEP_FILES =  $(DEPDIR)/foldercategories.moc.P $(DEPDIR)/yammigui.moc.P $(DEPDIR)/foldergroups.moc.P $(DEPDIR)/folder.moc.P $(DEPDIR)/foldermedia.moc.P $(DEPDIR)/yammimodel.moc.P $(DEPDIR)/songinfo.moc.P $(DEPDIR)/preferencesdialog.moc.P $(DEPDIR)/mylistview.moc.P $(DEPDIR)/YammiGuiBase.P $(DEPDIR)/SongInfoDialog.P $(DEPDIR)/PreferencesDialogBase.P $(DEPDIR)/DeleteDialog.P   .deps/folder.P .deps/foldercategories.P \
.deps/foldergroups.P .deps/foldermedia.P .deps/fuzzsrch.P .deps/main.P \
.deps/mp3_layer.P .deps/mp3tag.P .deps/mydatetime.P .deps/mylist.P \
.deps/mylistview.P .deps/preferencesdialog.P .deps/prefs.P .deps/song.P \
.deps/songentry.P .deps/songentryint.P .deps/songentrystring.P \
.deps/songentrytimestamp.P .deps/songinfo.P .deps/songlistitem.P \
.deps/yammigui.P .deps/yammimodel.P

SOURCES = $(yammi_SOURCES)
OBJECTS = $(yammi_OBJECTS)

#>- all: all-redirect
#>+ 1
all: docs-am  all-redirect
.SUFFIXES:
.SUFFIXES: .S .c .cpp .lo .o .obj .s
$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
#>- 	cd $(top_srcdir) && $(AUTOMAKE) --gnu yammi/Makefile
#>+ 2
	cd $(top_srcdir) && $(AUTOMAKE) --gnu yammi/Makefile
	cd $(top_srcdir) && perl admin/am_edit yammi/Makefile.in

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-binPROGRAMS:

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

distclean-binPROGRAMS:

maintainer-clean-binPROGRAMS:

install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`"; \
	    $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	list='$(bin_PROGRAMS)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/`echo $$p|sed 's/$(EXEEXT)$$//'|sed '$(transform)'|sed 's/$$/$(EXEEXT)/'`; \
	done

# FIXME: We should only use cygpath when building on Windows,
# and only if it is available.
.c.obj:
	$(COMPILE) -c `cygpath -w $<`

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

yammi$(EXEEXT): $(yammi_OBJECTS) $(yammi_DEPENDENCIES)
	@rm -f yammi$(EXEEXT)
	$(CXXLINK) $(yammi_LDFLAGS) $(yammi_OBJECTS) $(yammi_LDADD) $(LIBS)
.cpp.o:
	$(CXXCOMPILE) -c $<
.cpp.obj:
	$(CXXCOMPILE) -c `cygpath -w $<`
.cpp.lo:
	$(LTCXXCOMPILE) -c $<

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.

@SET_MAKE@

all-recursive install-data-recursive install-exec-recursive \
installdirs-recursive install-recursive uninstall-recursive  \
check-recursive installcheck-recursive info-recursive dvi-recursive:
	@set fnord $(MAKEFLAGS); amf=$$2; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@set fnord $(MAKEFLAGS); amf=$$2; \
	dot_seen=no; \
	rev=''; list='$(SUBDIRS)'; for subdir in $$list; do \
	  rev="$$subdir $$rev"; \
	  test "$$subdir" = "." && dot_seen=yes; \
	done; \
	test "$$dot_seen" = "no" && rev=". $$rev"; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	   || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $$unique $(LISP)

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
   if test "$$subdir" = .; then :; else \
	    test -f $$subdir/TAGS && tags="$$tags -i $$here/$$subdir/TAGS"; \
   fi; \
	done; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = yammi

distdir: $(DISTFILES)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(top_distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	cd $(top_srcdir) \
	  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu yammi/Makefile
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  if test -d $$d/$$file; then \
	    cp -pr $$d/$$file $(distdir)/$$file; \
	  else \
	    test -f $(distdir)/$$file \
	    || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	    || cp -p $$d/$$file $(distdir)/$$file || :; \
	  fi; \
	done
	for subdir in $(SUBDIRS); do \
	  if test "$$subdir" = .; then :; else \
	    test -d $(distdir)/$$subdir \
	    || mkdir $(distdir)/$$subdir \
	    || exit 1; \
	    chmod 777 $(distdir)/$$subdir; \
	    (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) top_distdir=../$(top_distdir) distdir=../$(distdir)/$$subdir distdir) \
	      || exit 1; \
	  fi; \
	done

DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)

-include $(DEP_FILES)

mostlyclean-depend:

clean-depend:

distclean-depend:
	-rm -rf .deps

maintainer-clean-depend:

%.o: %.c
	@echo '$(COMPILE) -c $<'; \
	$(COMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.c
	@echo '$(LTCOMPILE) -c $<'; \
	$(LTCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp

%.o: %.cpp
	@echo '$(CXXCOMPILE) -c $<'; \
	$(CXXCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-cp .deps/$(*F).pp .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm .deps/$(*F).pp

%.lo: %.cpp
	@echo '$(LTCXXCOMPILE) -c $<'; \
	$(LTCXXCOMPILE) -Wp,-MD,.deps/$(*F).pp -c $<
	@-sed -e 's/^\([^:]*\)\.o[ 	]*:/\1.lo \1.o :/' \
	  < .deps/$(*F).pp > .deps/$(*F).P; \
	tr ' ' '\012' < .deps/$(*F).pp \
	  | sed -e 's/^\\$$//' -e '/^$$/ d' -e '/:$$/ d' -e 's/$$/ :/' \
	    >> .deps/$(*F).P; \
	rm -f .deps/$(*F).pp
info-am:
info: info-recursive
dvi-am:
dvi: dvi-recursive
check-am: all-am
check: check-recursive
installcheck-am:
installcheck: installcheck-recursive
install-exec-am: install-binPROGRAMS
install-exec: install-exec-recursive

install-data-am:
install-data: install-data-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am
install: install-recursive
uninstall-am: uninstall-binPROGRAMS
uninstall: uninstall-recursive
all-am: Makefile $(PROGRAMS)
all-redirect: all-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) AM_INSTALL_PROGRAM_FLAGS=-s install
installdirs: installdirs-recursive
installdirs-am:
	$(mkinstalldirs)  $(DESTDIR)$(bindir)


mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
mostlyclean-am:  mostlyclean-binPROGRAMS mostlyclean-compile \
		mostlyclean-libtool mostlyclean-tags mostlyclean-depend \
		mostlyclean-generic

mostlyclean: mostlyclean-recursive

#>- clean-am:  clean-binPROGRAMS clean-compile clean-libtool clean-tags \
#>- 		clean-depend clean-generic mostlyclean-am
#>+ 2
clean-am: clean-metasources clean-ui clean-final   clean-binPROGRAMS clean-compile clean-libtool clean-tags \
		clean-depend clean-generic mostlyclean-am

#>- clean: clean-recursive
#>+ 1
clean: kde-rpo-clean  clean-recursive

distclean-am:  distclean-binPROGRAMS distclean-compile distclean-libtool \
		distclean-tags distclean-depend distclean-generic \
		clean-am
	-rm -f libtool

distclean: distclean-recursive

maintainer-clean-am:  maintainer-clean-binPROGRAMS \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-tags maintainer-clean-depend \
		maintainer-clean-generic distclean-am
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

maintainer-clean: maintainer-clean-recursive

.PHONY: mostlyclean-binPROGRAMS distclean-binPROGRAMS clean-binPROGRAMS \
maintainer-clean-binPROGRAMS uninstall-binPROGRAMS install-binPROGRAMS \
mostlyclean-compile distclean-compile clean-compile \
maintainer-clean-compile mostlyclean-libtool distclean-libtool \
clean-libtool maintainer-clean-libtool install-data-recursive \
uninstall-data-recursive install-exec-recursive \
uninstall-exec-recursive installdirs-recursive uninstalldirs-recursive \
all-recursive check-recursive installcheck-recursive info-recursive \
dvi-recursive mostlyclean-recursive distclean-recursive clean-recursive \
maintainer-clean-recursive tags tags-recursive mostlyclean-tags \
distclean-tags clean-tags maintainer-clean-tags distdir \
mostlyclean-depend distclean-depend clean-depend \
maintainer-clean-depend info-am info dvi-am dvi check check-am \
installcheck-am installcheck install-exec-am install-exec \
install-data-am install-data install-am install uninstall-am uninstall \
all-redirect all-am all installdirs-am installdirs mostlyclean-generic \
distclean-generic clean-generic maintainer-clean-generic clean \
mostlyclean distclean maintainer-clean


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 3
SongInfoDialog.moc: $(srcdir)/SongInfoDialog.h
	$(MOC) $(srcdir)/SongInfoDialog.h -o SongInfoDialog.moc

#>+ 3
foldercategories.moc.cpp: $(srcdir)/foldercategories.h
	$(MOC) $(srcdir)/foldercategories.h -o foldercategories.moc.cpp

#>+ 3
PreferencesDialogBase.moc: $(srcdir)/PreferencesDialogBase.h
	$(MOC) $(srcdir)/PreferencesDialogBase.h -o PreferencesDialogBase.moc

#>+ 3
yammigui.moc.cpp: $(srcdir)/yammigui.h
	$(MOC) $(srcdir)/yammigui.h -o yammigui.moc.cpp

#>+ 3
DeleteDialog.moc: $(srcdir)/DeleteDialog.h
	$(MOC) $(srcdir)/DeleteDialog.h -o DeleteDialog.moc

#>+ 3
foldergroups.moc.cpp: $(srcdir)/foldergroups.h
	$(MOC) $(srcdir)/foldergroups.h -o foldergroups.moc.cpp

#>+ 3
folder.moc.cpp: $(srcdir)/folder.h
	$(MOC) $(srcdir)/folder.h -o folder.moc.cpp

#>+ 3
foldermedia.moc.cpp: $(srcdir)/foldermedia.h
	$(MOC) $(srcdir)/foldermedia.h -o foldermedia.moc.cpp

#>+ 3
yammimodel.moc.cpp: $(srcdir)/yammimodel.h
	$(MOC) $(srcdir)/yammimodel.h -o yammimodel.moc.cpp

#>+ 3
songinfo.moc.cpp: $(srcdir)/songinfo.h
	$(MOC) $(srcdir)/songinfo.h -o songinfo.moc.cpp

#>+ 3
YammiGuiBase.moc: $(srcdir)/YammiGuiBase.h
	$(MOC) $(srcdir)/YammiGuiBase.h -o YammiGuiBase.moc

#>+ 3
preferencesdialog.moc.cpp: $(srcdir)/preferencesdialog.h
	$(MOC) $(srcdir)/preferencesdialog.h -o preferencesdialog.moc.cpp

#>+ 3
mylistview.moc.cpp: $(srcdir)/mylistview.h
	$(MOC) $(srcdir)/mylistview.h -o mylistview.moc.cpp

#>+ 41
YammiGuiBase.cpp: $(srcdir)/YammiGuiBase.ui YammiGuiBase.h YammiGuiBase.moc
	rm -f YammiGuiBase.cpp
	$(UIC) -i YammiGuiBase.h $(srcdir)/YammiGuiBase.ui > YammiGuiBase.cpp || rm -f YammiGuiBase.cpp
	echo '#include "YammiGuiBase.moc"' >> YammiGuiBase.cpp

YammiGuiBase.h: $(srcdir)/YammiGuiBase.ui
	$(UIC) -o YammiGuiBase.h $(srcdir)/YammiGuiBase.ui

YammiGuiBase.moc: YammiGuiBase.h
	$(MOC) YammiGuiBase.h -o YammiGuiBase.moc
SongInfoDialog.cpp: $(srcdir)/SongInfoDialog.ui SongInfoDialog.h SongInfoDialog.moc
	rm -f SongInfoDialog.cpp
	$(UIC) -i SongInfoDialog.h $(srcdir)/SongInfoDialog.ui > SongInfoDialog.cpp || rm -f SongInfoDialog.cpp
	echo '#include "SongInfoDialog.moc"' >> SongInfoDialog.cpp

SongInfoDialog.h: $(srcdir)/SongInfoDialog.ui
	$(UIC) -o SongInfoDialog.h $(srcdir)/SongInfoDialog.ui

SongInfoDialog.moc: SongInfoDialog.h
	$(MOC) SongInfoDialog.h -o SongInfoDialog.moc
PreferencesDialogBase.cpp: $(srcdir)/PreferencesDialogBase.ui PreferencesDialogBase.h PreferencesDialogBase.moc
	rm -f PreferencesDialogBase.cpp
	$(UIC) -i PreferencesDialogBase.h $(srcdir)/PreferencesDialogBase.ui > PreferencesDialogBase.cpp || rm -f PreferencesDialogBase.cpp
	echo '#include "PreferencesDialogBase.moc"' >> PreferencesDialogBase.cpp

PreferencesDialogBase.h: $(srcdir)/PreferencesDialogBase.ui
	$(UIC) -o PreferencesDialogBase.h $(srcdir)/PreferencesDialogBase.ui

PreferencesDialogBase.moc: PreferencesDialogBase.h
	$(MOC) PreferencesDialogBase.h -o PreferencesDialogBase.moc
DeleteDialog.cpp: $(srcdir)/DeleteDialog.ui DeleteDialog.h DeleteDialog.moc
	rm -f DeleteDialog.cpp
	$(UIC) -i DeleteDialog.h $(srcdir)/DeleteDialog.ui > DeleteDialog.cpp || rm -f DeleteDialog.cpp
	echo '#include "DeleteDialog.moc"' >> DeleteDialog.cpp

DeleteDialog.h: $(srcdir)/DeleteDialog.ui
	$(UIC) -o DeleteDialog.h $(srcdir)/DeleteDialog.ui

DeleteDialog.moc: DeleteDialog.h
	$(MOC) DeleteDialog.h -o DeleteDialog.moc

#>+ 3
clean-metasources:
	-rm -f  SongInfoDialog.moc foldercategories.moc.cpp PreferencesDialogBase.moc yammigui.moc.cpp DeleteDialog.moc foldergroups.moc.cpp folder.moc.cpp foldermedia.moc.cpp yammimodel.moc.cpp songinfo.moc.cpp YammiGuiBase.moc preferencesdialog.moc.cpp mylistview.moc.cpp

#>+ 7
clean-ui:
	-rm -f \
	YammiGuiBase.cpp YammiGuiBase.h YammiGuiBase.moc \
	SongInfoDialog.cpp SongInfoDialog.h SongInfoDialog.moc \
	PreferencesDialogBase.cpp PreferencesDialogBase.h PreferencesDialogBase.moc \
	DeleteDialog.cpp DeleteDialog.h DeleteDialog.moc 

#>+ 2
docs-am:

#>+ 5
force-reedit:
		cd $(top_srcdir) && $(AUTOMAKE) --gnu yammi/Makefile
	cd $(top_srcdir) && perl admin/am_edit yammi/Makefile.in


#>+ 11
yammi.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/songentrystring.cpp $(srcdir)/songentryint.cpp $(srcdir)/songentrytimestamp.cpp $(srcdir)/songentry.cpp $(srcdir)/mylistview.cpp $(srcdir)/preferencesdialog.cpp $(srcdir)/yammimodel.cpp $(srcdir)/yammigui.cpp $(srcdir)/songlistitem.cpp $(srcdir)/songinfo.cpp $(srcdir)/song.cpp $(srcdir)/prefs.cpp $(srcdir)/mylist.cpp $(srcdir)/mydatetime.cpp $(srcdir)/mp3tag.cpp $(srcdir)/mp3_layer.cpp $(srcdir)/fuzzsrch.cpp $(srcdir)/foldermedia.cpp $(srcdir)/foldergroups.cpp $(srcdir)/foldercategories.cpp $(srcdir)/folder.cpp $(srcdir)/main.cpp $(srcdir)/YammiGuiBase.cpp $(srcdir)/SongInfoDialog.cpp $(srcdir)/PreferencesDialogBase.cpp $(srcdir)/DeleteDialog.cpp  foldercategories.moc.cpp yammigui.moc.cpp foldergroups.moc.cpp folder.moc.cpp foldermedia.moc.cpp yammimodel.moc.cpp songinfo.moc.cpp preferencesdialog.moc.cpp mylistview.moc.cpp SongInfoDialog.moc PreferencesDialogBase.moc DeleteDialog.moc YammiGuiBase.moc  YammiGuiBase.moc SongInfoDialog.moc PreferencesDialogBase.moc DeleteDialog.moc
	@echo 'creating yammi.all_cpp.cpp ...'; \
	rm -f yammi.all_cpp.files yammi.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> yammi.all_cpp.final; \
	for file in songentrystring.cpp songentryint.cpp songentrytimestamp.cpp songentry.cpp mylistview.cpp preferencesdialog.cpp yammimodel.cpp yammigui.cpp songlistitem.cpp songinfo.cpp song.cpp prefs.cpp mylist.cpp mydatetime.cpp mp3tag.cpp mp3_layer.cpp fuzzsrch.cpp foldermedia.cpp foldergroups.cpp foldercategories.cpp folder.cpp main.cpp YammiGuiBase.cpp SongInfoDialog.cpp PreferencesDialogBase.cpp DeleteDialog.cpp  foldercategories.moc.cpp yammigui.moc.cpp foldergroups.moc.cpp folder.moc.cpp foldermedia.moc.cpp yammimodel.moc.cpp songinfo.moc.cpp preferencesdialog.moc.cpp mylistview.moc.cpp; do \
	  echo "#include \"$$file\"" >> yammi.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> yammi.all_cpp.final; \
	done; \
	cat yammi.all_cpp.final yammi.all_cpp.files  > yammi.all_cpp.cpp; \
	rm -f yammi.all_cpp.final yammi.all_cpp.files

#>+ 3
clean-final:
	-rm -f yammi.all_cpp.cpp

#>+ 2
final:
	$(MAKE) yammi_OBJECTS="$(yammi_final_OBJECTS)" all-am
#>+ 2
no-final:
	$(MAKE) yammi_OBJECTS="$(yammi_nofinal_OBJECTS)" all-am
#>+ 3
cvs-clean:
	$(MAKE) -f $(top_srcdir)/admin/Makefile.common cvs-clean

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 27
$(srcdir)/songentryint.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/foldergroups.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/songentry.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/PreferencesDialogBase.cpp: PreferencesDialogBase.moc 
$(srcdir)/preferencesdialog.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/songinfo.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/mydatetime.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/fuzzsrch.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/yammimodel.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/songentrystring.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/main.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/yammigui.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/YammiGuiBase.cpp: YammiGuiBase.moc 
$(srcdir)/foldercategories.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/mp3_layer.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/folder.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/prefs.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/mylist.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/mylistview.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/song.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/songentrytimestamp.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/foldermedia.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/mp3tag.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/songlistitem.cpp: YammiGuiBase.h SongInfoDialog.h PreferencesDialogBase.h DeleteDialog.h 
$(srcdir)/DeleteDialog.cpp: DeleteDialog.moc 
$(srcdir)/SongInfoDialog.cpp: SongInfoDialog.moc 
